//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: space.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import Foundation
import Combine
import GRPC
import NIO

class StorageService {
    var spaceApi: Space_SpaceApiClient
    
    init() {
        let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)

        // Make sure the group is shutdown when we're done with it.
        defer {
          try! group.syncShutdownGracefully()
        }
        
        let channel = ClientConnection.insecure(group: group)
            .connect(host: "localhost", port: 9999)
        
        defer {
            try? channel.close().wait()
        }
        
        spaceApi = Space_SpaceApiClient(channel: channel)
        
        listBuckets(bucketName: "xyz")
        uploadFiles(bucketName: "bd1", path: "123", filesToUpload: ["/Users/erzasalat/one", "/Users/erzasalat/two", "/Users/erzasalat/three"])
    }
    
    func uploadFiles(bucketName: String, path: String, filesToUpload: [String]) {
        var resultCount = 1
        let filesList = try! JSONSerialization.data(withJSONObject: filesToUpload)
        let filesListJson = NSString(data: filesList, encoding: String.Encoding.utf8.rawValue)! as String
        let requestString = "{\"bucket\" : \"" + bucketName + "\", \"targetPath\" : \"" + path + "\", \"sourcePaths\": " + filesListJson + "}"
        let call = try! spaceApi.addItems(Space_AddItemsRequest(jsonString: requestString
        )) { item in
            print("Result #\(resultCount): \(item)")
            resultCount += 1
        }

        let status = try! call.status.recover { _ in .processingError }.wait()
        if status.code != .ok {
         print("uploadFiles Errors: \(status)")
        }
        else {
           print("uploadFiles Success")
        }
    }
    
    func listBuckets(bucketName: String) {
        let response: Space_ListBucketsResponse
        
        do {
            response = try spaceApi.listBuckets(Space_ListBucketsRequest()).response.wait()
            
        } catch {
          print("listBuckets Error: \(error)")
          return
        }
        
        print("listBuckets: \(response.buckets)")
    }
  
    func createBucket(bucketName: String) {
       let response: Space_CreateBucketResponse
       
       do {
           response = try spaceApi.createBucket(Space_CreateBucketRequest(jsonString: "{\"slug\" : \"" + bucketName + "\"}")).response.wait()
           
       } catch {
         print("createBucket Error: \(error)")
         return
       }
       
       print("createBucket: \(response.bucket)")
    }
    
    func createFolder(bucketName: String, path: String) {
        let response: Space_CreateFolderResponse
        
        do {
            response = try spaceApi.createFolder(Space_CreateFolderRequest(jsonString: "{\"bucket\" : \"" + bucketName + "\", \"path\" : \"" + path + "\"}")).response.wait()
            
        } catch {
          print("createFolder Error: \(error)")
          return
        }
        
        print("createFolder: \(response)")
    }
    
    func listDirectory(bucketName: String, path: String) {
        let response: Space_ListDirectoryResponse
        
        do {
            response = try spaceApi.listDirectory(Space_ListDirectoryRequest(jsonString: "{\"bucket\" : \"" + bucketName + "\", \"path\" : \"" + path + "\"}")).response.wait()
            
        } catch {
          print("listDirectory Error: \(error)")
          return
        }
        
        print("listDirectory: \(response.entries)")
    }
    
    func openFile(bucketName: String, path: String) {
        let response: Space_OpenFileResponse
        
        do {
            response = try spaceApi.openFile(Space_OpenFileRequest(jsonString: "{\"bucket\" : \"" + bucketName + "\", \"path\" : \"" + path + "\"}")).response.wait()
            
        } catch {
          print("openFile Error: \(error)")
          return
        }
        
        print("openFile: \(response.location)")
    }
    
    func shareBucket(bucketName: String) {
        let response: Space_ShareBucketResponse
        
        do {
            response = try spaceApi.shareBucket(Space_ShareBucketRequest(jsonString: "{\"bucket\" : \"" + bucketName + "\"}")).response.wait()
            
        } catch {
          print("shareBucket Error: \(error)")
          return
        }
        
        print("shareBucket: \(response.threadinfo)")
    }
    
    func joinBucket(bucketName: String, key: String, addresses: [String]) {
        let response: Space_JoinBucketResponse
        
        /* bucket,
        threadInfo: {
          key,
          addresses: addresses.replace(' ', '').split(','),
        } */
        
        let addressesList = try! JSONSerialization.data(withJSONObject: addresses)
        let addressesListJson = NSString(data: addressesList, encoding: String.Encoding.utf8.rawValue)! as String
        
        do {
            response = try spaceApi.joinBucket(Space_JoinBucketRequest(jsonString: "{\"bucket\" : \"" + bucketName + "\", \"threadInfo\" : { \"key\" : \"" + key + "\", \"addresses\" : " + addressesListJson + "}")).response.wait()
            
        } catch {
          print("joinBucket Error: \(error)")
          return
        }
        
        print("joinBucket: \(response.result)")
    }
}
