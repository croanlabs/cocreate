//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: space.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Space_SpaceApiClient, then call methods of this protocol to make API calls.
internal protocol Space_SpaceApiClientProtocol: GRPCClient {
  func listDirectories(
    _ request: Space_ListDirectoriesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_ListDirectoriesRequest, Space_ListDirectoriesResponse>

  func listDirectory(
    _ request: Space_ListDirectoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_ListDirectoryRequest, Space_ListDirectoryResponse>

  func getConfigInfo(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Space_ConfigInfoResponse>

  func generateKeyPair(
    _ request: Space_GenerateKeyPairRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_GenerateKeyPairRequest, Space_GenerateKeyPairResponse>

  func generateKeyPairWithForce(
    _ request: Space_GenerateKeyPairRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_GenerateKeyPairRequest, Space_GenerateKeyPairResponse>

  func subscribe(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Space_FileEventResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Space_FileEventResponse>

  func txlSubscribe(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Space_TextileEventResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Space_TextileEventResponse>

  func openFile(
    _ request: Space_OpenFileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_OpenFileRequest, Space_OpenFileResponse>

  func addItems(
    _ request: Space_AddItemsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Space_AddItemsResponse) -> Void
  ) -> ServerStreamingCall<Space_AddItemsRequest, Space_AddItemsResponse>

  func createFolder(
    _ request: Space_CreateFolderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_CreateFolderRequest, Space_CreateFolderResponse>

  func toggleFuseDrive(
    _ request: Space_ToggleFuseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_ToggleFuseRequest, Space_FuseDriveResponse>

  func getFuseDriveStatus(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Space_FuseDriveResponse>

  func createBucket(
    _ request: Space_CreateBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_CreateBucketRequest, Space_CreateBucketResponse>

  func getIdentityByUsername(
    _ request: Space_GetIdentityByUsernameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_GetIdentityByUsernameRequest, Space_GetIdentityByUsernameResponse>

  func createUsernameAndEmail(
    _ request: Space_CreateUsernameAndEmailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_CreateUsernameAndEmailRequest, Space_CreateUsernameAndEmailResponse>

  func backupKeysByPassphrase(
    _ request: Space_BackupKeysByPassphraseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_BackupKeysByPassphraseRequest, Space_BackupKeysByPassphraseResponse>

  func recoverKeysByPassphrase(
    _ request: Space_RecoverKeysByPassphraseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_RecoverKeysByPassphraseRequest, Space_RecoverKeysByPassphraseResponse>

  func shareBucket(
    _ request: Space_ShareBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_ShareBucketRequest, Space_ShareBucketResponse>

  func joinBucket(
    _ request: Space_JoinBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_JoinBucketRequest, Space_JoinBucketResponse>

  func shareBucketViaEmail(
    _ request: Space_ShareBucketViaEmailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_ShareBucketViaEmailRequest, Space_ShareBucketViaEmailResponse>

  func shareBucketViaIdentity(
    _ request: Space_ShareBucketViaIdentityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_ShareBucketViaIdentityRequest, Space_ShareBucketViaIdentityResponse>

  func generateFileShareLink(
    _ request: Space_GenerateFileShareLinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_GenerateFileShareLinkRequest, Space_GenerateFileShareLinkResponse>

  func listBuckets(
    _ request: Space_ListBucketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Space_ListBucketsRequest, Space_ListBucketsResponse>

}

extension Space_SpaceApiClientProtocol {

  /// Get all folder or files in the default bucket. It fetches all subdirectories too.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDirectories.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listDirectories(
    _ request: Space_ListDirectoriesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_ListDirectoriesRequest, Space_ListDirectoriesResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/ListDirectories",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get the folder or files in the path directory.
  /// Unlike ListDirectories, this only returns immediate children at path.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDirectory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listDirectory(
    _ request: Space_ListDirectoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_ListDirectoryRequest, Space_ListDirectoryResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/ListDirectory",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get Config information installed daemon
  ///
  /// - Parameters:
  ///   - request: Request to send to GetConfigInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getConfigInfo(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Space_ConfigInfoResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/GetConfigInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Generate Key Pair for current account.
  /// This will return error if daemon account already has keypairs
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateKeyPair.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func generateKeyPair(
    _ request: Space_GenerateKeyPairRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_GenerateKeyPairRequest, Space_GenerateKeyPairResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/GenerateKeyPair",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Force Generation of KeyPair. This will override existing keys stored in daemon.
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateKeyPairWithForce.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func generateKeyPairWithForce(
    _ request: Space_GenerateKeyPairRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_GenerateKeyPairRequest, Space_GenerateKeyPairResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/GenerateKeyPairWithForce",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Subscribe to file events. This streams responses to the caller
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribe(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Space_FileEventResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Space_FileEventResponse> {
    return self.makeServerStreamingCall(
      path: "/space.SpaceApi/Subscribe",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Subscribe to textile events. This streams responses to the caller
  ///
  /// - Parameters:
  ///   - request: Request to send to TxlSubscribe.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func txlSubscribe(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Space_TextileEventResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Space_TextileEventResponse> {
    return self.makeServerStreamingCall(
      path: "/space.SpaceApi/TxlSubscribe",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Open a file in the daemon.
  /// Daemon keeps track of all open files and closes them if no activity is noticed after a while
  ///
  /// - Parameters:
  ///   - request: Request to send to OpenFile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func openFile(
    _ request: Space_OpenFileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_OpenFileRequest, Space_OpenFileResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/OpenFile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Adds items (files/folders) to be uploaded to the bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddItems.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func addItems(
    _ request: Space_AddItemsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Space_AddItemsResponse) -> Void
  ) -> ServerStreamingCall<Space_AddItemsRequest, Space_AddItemsResponse> {
    return self.makeServerStreamingCall(
      path: "/space.SpaceApi/AddItems",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Creates a folder/directory at the specified path
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFolder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createFolder(
    _ request: Space_CreateFolderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_CreateFolderRequest, Space_CreateFolderResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/CreateFolder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Toggle FUSE drive to be mounted or unmounted
  ///
  /// - Parameters:
  ///   - request: Request to send to ToggleFuseDrive.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func toggleFuseDrive(
    _ request: Space_ToggleFuseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_ToggleFuseRequest, Space_FuseDriveResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/ToggleFuseDrive",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get status of FUSE drive. If mounted or unmounted
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFuseDriveStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFuseDriveStatus(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Space_FuseDriveResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/GetFuseDriveStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Create a new bucket owned by current user (aka keypair)
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBucket(
    _ request: Space_CreateBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_CreateBucketRequest, Space_CreateBucketResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/CreateBucket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get Identity by Username
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIdentityByUsername.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getIdentityByUsername(
    _ request: Space_GetIdentityByUsernameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_GetIdentityByUsernameRequest, Space_GetIdentityByUsernameResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/GetIdentityByUsername",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Create a new user identity. Username and Email required.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateUsernameAndEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createUsernameAndEmail(
    _ request: Space_CreateUsernameAndEmailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_CreateUsernameAndEmailRequest, Space_CreateUsernameAndEmailResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/CreateUsernameAndEmail",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Backup Key by Passphrase
  ///
  /// - Parameters:
  ///   - request: Request to send to BackupKeysByPassphrase.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func backupKeysByPassphrase(
    _ request: Space_BackupKeysByPassphraseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_BackupKeysByPassphraseRequest, Space_BackupKeysByPassphraseResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/BackupKeysByPassphrase",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Recover Keys by Passphrase
  ///
  /// - Parameters:
  ///   - request: Request to send to RecoverKeysByPassphrase.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func recoverKeysByPassphrase(
    _ request: Space_RecoverKeysByPassphraseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_RecoverKeysByPassphraseRequest, Space_RecoverKeysByPassphraseResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/RecoverKeysByPassphrase",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Share bucket
  ///
  /// - Parameters:
  ///   - request: Request to send to ShareBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func shareBucket(
    _ request: Space_ShareBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_ShareBucketRequest, Space_ShareBucketResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/ShareBucket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Join bucket
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func joinBucket(
    _ request: Space_JoinBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_JoinBucketRequest, Space_JoinBucketResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/JoinBucket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Share bucket via email
  ///
  /// - Parameters:
  ///   - request: Request to send to ShareBucketViaEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func shareBucketViaEmail(
    _ request: Space_ShareBucketViaEmailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_ShareBucketViaEmailRequest, Space_ShareBucketViaEmailResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/ShareBucketViaEmail",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Share bucket via identity information
  ///
  /// - Parameters:
  ///   - request: Request to send to ShareBucketViaIdentity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func shareBucketViaIdentity(
    _ request: Space_ShareBucketViaIdentityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_ShareBucketViaIdentityRequest, Space_ShareBucketViaIdentityResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/ShareBucketViaIdentity",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Generate sharing link for file in bucket
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateFileShareLink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func generateFileShareLink(
    _ request: Space_GenerateFileShareLinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_GenerateFileShareLinkRequest, Space_GenerateFileShareLinkResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/GenerateFileShareLink",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to ListBuckets
  ///
  /// - Parameters:
  ///   - request: Request to send to ListBuckets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listBuckets(
    _ request: Space_ListBucketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Space_ListBucketsRequest, Space_ListBucketsResponse> {
    return self.makeUnaryCall(
      path: "/space.SpaceApi/ListBuckets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Space_SpaceApiClient: Space_SpaceApiClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the space.SpaceApi service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Space_SpaceApiProvider: CallHandlerProvider {
  /// Get all folder or files in the default bucket. It fetches all subdirectories too.
  func listDirectories(request: Space_ListDirectoriesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_ListDirectoriesResponse>
  /// Get the folder or files in the path directory.
  /// Unlike ListDirectories, this only returns immediate children at path.
  func listDirectory(request: Space_ListDirectoryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_ListDirectoryResponse>
  /// Get Config information installed daemon
  func getConfigInfo(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Space_ConfigInfoResponse>
  /// Generate Key Pair for current account.
  /// This will return error if daemon account already has keypairs
  func generateKeyPair(request: Space_GenerateKeyPairRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_GenerateKeyPairResponse>
  /// Force Generation of KeyPair. This will override existing keys stored in daemon.
  func generateKeyPairWithForce(request: Space_GenerateKeyPairRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_GenerateKeyPairResponse>
  /// Subscribe to file events. This streams responses to the caller
  func subscribe(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Space_FileEventResponse>) -> EventLoopFuture<GRPCStatus>
  /// Subscribe to textile events. This streams responses to the caller
  func txlSubscribe(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Space_TextileEventResponse>) -> EventLoopFuture<GRPCStatus>
  /// Open a file in the daemon.
  /// Daemon keeps track of all open files and closes them if no activity is noticed after a while
  func openFile(request: Space_OpenFileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_OpenFileResponse>
  /// Adds items (files/folders) to be uploaded to the bucket.
  func addItems(request: Space_AddItemsRequest, context: StreamingResponseCallContext<Space_AddItemsResponse>) -> EventLoopFuture<GRPCStatus>
  /// Creates a folder/directory at the specified path
  func createFolder(request: Space_CreateFolderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_CreateFolderResponse>
  /// Toggle FUSE drive to be mounted or unmounted
  func toggleFuseDrive(request: Space_ToggleFuseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_FuseDriveResponse>
  /// Get status of FUSE drive. If mounted or unmounted
  func getFuseDriveStatus(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Space_FuseDriveResponse>
  /// Create a new bucket owned by current user (aka keypair)
  func createBucket(request: Space_CreateBucketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_CreateBucketResponse>
  /// Get Identity by Username
  func getIdentityByUsername(request: Space_GetIdentityByUsernameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_GetIdentityByUsernameResponse>
  /// Create a new user identity. Username and Email required.
  func createUsernameAndEmail(request: Space_CreateUsernameAndEmailRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_CreateUsernameAndEmailResponse>
  /// Backup Key by Passphrase
  func backupKeysByPassphrase(request: Space_BackupKeysByPassphraseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_BackupKeysByPassphraseResponse>
  /// Recover Keys by Passphrase
  func recoverKeysByPassphrase(request: Space_RecoverKeysByPassphraseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_RecoverKeysByPassphraseResponse>
  /// Share bucket
  func shareBucket(request: Space_ShareBucketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_ShareBucketResponse>
  /// Join bucket
  func joinBucket(request: Space_JoinBucketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_JoinBucketResponse>
  /// Share bucket via email
  func shareBucketViaEmail(request: Space_ShareBucketViaEmailRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_ShareBucketViaEmailResponse>
  /// Share bucket via identity information
  func shareBucketViaIdentity(request: Space_ShareBucketViaIdentityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_ShareBucketViaIdentityResponse>
  /// Generate sharing link for file in bucket
  func generateFileShareLink(request: Space_GenerateFileShareLinkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_GenerateFileShareLinkResponse>
  func listBuckets(request: Space_ListBucketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Space_ListBucketsResponse>
}

extension Space_SpaceApiProvider {
  internal var serviceName: String { return "space.SpaceApi" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListDirectories":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listDirectories(request: request, context: context)
        }
      }

    case "ListDirectory":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listDirectory(request: request, context: context)
        }
      }

    case "GetConfigInfo":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getConfigInfo(request: request, context: context)
        }
      }

    case "GenerateKeyPair":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.generateKeyPair(request: request, context: context)
        }
      }

    case "GenerateKeyPairWithForce":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.generateKeyPairWithForce(request: request, context: context)
        }
      }

    case "Subscribe":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.subscribe(request: request, context: context)
        }
      }

    case "TxlSubscribe":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.txlSubscribe(request: request, context: context)
        }
      }

    case "OpenFile":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.openFile(request: request, context: context)
        }
      }

    case "AddItems":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.addItems(request: request, context: context)
        }
      }

    case "CreateFolder":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createFolder(request: request, context: context)
        }
      }

    case "ToggleFuseDrive":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.toggleFuseDrive(request: request, context: context)
        }
      }

    case "GetFuseDriveStatus":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getFuseDriveStatus(request: request, context: context)
        }
      }

    case "CreateBucket":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createBucket(request: request, context: context)
        }
      }

    case "GetIdentityByUsername":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getIdentityByUsername(request: request, context: context)
        }
      }

    case "CreateUsernameAndEmail":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createUsernameAndEmail(request: request, context: context)
        }
      }

    case "BackupKeysByPassphrase":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.backupKeysByPassphrase(request: request, context: context)
        }
      }

    case "RecoverKeysByPassphrase":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.recoverKeysByPassphrase(request: request, context: context)
        }
      }

    case "ShareBucket":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.shareBucket(request: request, context: context)
        }
      }

    case "JoinBucket":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.joinBucket(request: request, context: context)
        }
      }

    case "ShareBucketViaEmail":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.shareBucketViaEmail(request: request, context: context)
        }
      }

    case "ShareBucketViaIdentity":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.shareBucketViaIdentity(request: request, context: context)
        }
      }

    case "GenerateFileShareLink":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.generateFileShareLink(request: request, context: context)
        }
      }

    case "ListBuckets":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listBuckets(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

